// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: supervise.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_supervise_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_supervise_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_supervise_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_supervise_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_supervise_2eproto;
namespace rpc {
class Execution;
struct ExecutionDefaultTypeInternal;
extern ExecutionDefaultTypeInternal _Execution_default_instance_;
class Execution_EnvironmentEntry_DoNotUse;
struct Execution_EnvironmentEntry_DoNotUseDefaultTypeInternal;
extern Execution_EnvironmentEntry_DoNotUseDefaultTypeInternal _Execution_EnvironmentEntry_DoNotUse_default_instance_;
class ResolveRequest;
struct ResolveRequestDefaultTypeInternal;
extern ResolveRequestDefaultTypeInternal _ResolveRequest_default_instance_;
class ResolveResponse;
struct ResolveResponseDefaultTypeInternal;
extern ResolveResponseDefaultTypeInternal _ResolveResponse_default_instance_;
}  // namespace rpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace rpc {

// ===================================================================


// -------------------------------------------------------------------

class Execution_EnvironmentEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          Execution_EnvironmentEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      Execution_EnvironmentEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Execution_EnvironmentEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Execution_EnvironmentEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Execution_EnvironmentEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Execution_EnvironmentEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Execution_EnvironmentEntry_DoNotUse*>(
        &_Execution_EnvironmentEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_supervise_2eproto;
};
// -------------------------------------------------------------------

class Execution final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rpc.Execution) */ {
 public:
  inline Execution() : Execution(nullptr) {}
  ~Execution() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Execution(
      ::google::protobuf::internal::ConstantInitialized);

  inline Execution(const Execution& from) : Execution(nullptr, from) {}
  inline Execution(Execution&& from) noexcept
      : Execution(nullptr, std::move(from)) {}
  inline Execution& operator=(const Execution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Execution& operator=(Execution&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Execution& default_instance() {
    return *internal_default_instance();
  }
  static inline const Execution* internal_default_instance() {
    return reinterpret_cast<const Execution*>(
        &_Execution_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Execution& a, Execution& b) { a.Swap(&b); }
  inline void Swap(Execution* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Execution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Execution* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Execution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Execution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Execution& from) { Execution::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Execution* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rpc.Execution"; }

 protected:
  explicit Execution(::google::protobuf::Arena* arena);
  Execution(::google::protobuf::Arena* arena, const Execution& from);
  Execution(::google::protobuf::Arena* arena, Execution&& from) noexcept
      : Execution(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kArgumentsFieldNumber = 2,
    kEnvironmentFieldNumber = 4,
    kExecutableFieldNumber = 1,
    kWorkingDirFieldNumber = 3,
  };
  // repeated string arguments = 2;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;

  public:
  void clear_arguments() ;
  const std::string& arguments(int index) const;
  std::string* mutable_arguments(int index);
  void set_arguments(int index, const std::string& value);
  void set_arguments(int index, std::string&& value);
  void set_arguments(int index, const char* value);
  void set_arguments(int index, const char* value, std::size_t size);
  void set_arguments(int index, absl::string_view value);
  std::string* add_arguments();
  void add_arguments(const std::string& value);
  void add_arguments(std::string&& value);
  void add_arguments(const char* value);
  void add_arguments(const char* value, std::size_t size);
  void add_arguments(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& arguments() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_arguments();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_arguments() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_arguments();

  public:
  // map<string, string> environment = 4;
  int environment_size() const;
  private:
  int _internal_environment_size() const;

  public:
  void clear_environment() ;
  const ::google::protobuf::Map<std::string, std::string>& environment() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_environment();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_environment() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_environment();

  public:
  // string executable = 1;
  void clear_executable() ;
  const std::string& executable() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_executable(Arg_&& arg, Args_... args);
  std::string* mutable_executable();
  PROTOBUF_NODISCARD std::string* release_executable();
  void set_allocated_executable(std::string* value);

  private:
  const std::string& _internal_executable() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executable(
      const std::string& value);
  std::string* _internal_mutable_executable();

  public:
  // string working_dir = 3;
  void clear_working_dir() ;
  const std::string& working_dir() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_working_dir(Arg_&& arg, Args_... args);
  std::string* mutable_working_dir();
  PROTOBUF_NODISCARD std::string* release_working_dir();
  void set_allocated_working_dir(std::string* value);

  private:
  const std::string& _internal_working_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_working_dir(
      const std::string& value);
  std::string* _internal_mutable_working_dir();

  public:
  // @@protoc_insertion_point(class_scope:rpc.Execution)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Execution_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Execution& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> arguments_;
    ::google::protobuf::internal::MapField<Execution_EnvironmentEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        environment_;
    ::google::protobuf::internal::ArenaStringPtr executable_;
    ::google::protobuf::internal::ArenaStringPtr working_dir_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_supervise_2eproto;
};
// -------------------------------------------------------------------

class ResolveResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rpc.ResolveResponse) */ {
 public:
  inline ResolveResponse() : ResolveResponse(nullptr) {}
  ~ResolveResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResolveResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResolveResponse(const ResolveResponse& from) : ResolveResponse(nullptr, from) {}
  inline ResolveResponse(ResolveResponse&& from) noexcept
      : ResolveResponse(nullptr, std::move(from)) {}
  inline ResolveResponse& operator=(const ResolveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveResponse& operator=(ResolveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResolveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResolveResponse* internal_default_instance() {
    return reinterpret_cast<const ResolveResponse*>(
        &_ResolveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ResolveResponse& a, ResolveResponse& b) { a.Swap(&b); }
  inline void Swap(ResolveResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResolveResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ResolveResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResolveResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResolveResponse& from) { ResolveResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResolveResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rpc.ResolveResponse"; }

 protected:
  explicit ResolveResponse(::google::protobuf::Arena* arena);
  ResolveResponse(::google::protobuf::Arena* arena, const ResolveResponse& from);
  ResolveResponse(::google::protobuf::Arena* arena, ResolveResponse&& from) noexcept
      : ResolveResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExecutionFieldNumber = 1,
  };
  // .rpc.Execution execution = 1;
  bool has_execution() const;
  void clear_execution() ;
  const ::rpc::Execution& execution() const;
  PROTOBUF_NODISCARD ::rpc::Execution* release_execution();
  ::rpc::Execution* mutable_execution();
  void set_allocated_execution(::rpc::Execution* value);
  void unsafe_arena_set_allocated_execution(::rpc::Execution* value);
  ::rpc::Execution* unsafe_arena_release_execution();

  private:
  const ::rpc::Execution& _internal_execution() const;
  ::rpc::Execution* _internal_mutable_execution();

  public:
  // @@protoc_insertion_point(class_scope:rpc.ResolveResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ResolveResponse_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResolveResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::rpc::Execution* execution_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_supervise_2eproto;
};
// -------------------------------------------------------------------

class ResolveRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rpc.ResolveRequest) */ {
 public:
  inline ResolveRequest() : ResolveRequest(nullptr) {}
  ~ResolveRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ResolveRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ResolveRequest(const ResolveRequest& from) : ResolveRequest(nullptr, from) {}
  inline ResolveRequest(ResolveRequest&& from) noexcept
      : ResolveRequest(nullptr, std::move(from)) {}
  inline ResolveRequest& operator=(const ResolveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveRequest& operator=(ResolveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResolveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResolveRequest* internal_default_instance() {
    return reinterpret_cast<const ResolveRequest*>(
        &_ResolveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ResolveRequest& a, ResolveRequest& b) { a.Swap(&b); }
  inline void Swap(ResolveRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResolveRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ResolveRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResolveRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ResolveRequest& from) { ResolveRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ResolveRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "rpc.ResolveRequest"; }

 protected:
  explicit ResolveRequest(::google::protobuf::Arena* arena);
  ResolveRequest(::google::protobuf::Arena* arena, const ResolveRequest& from);
  ResolveRequest(::google::protobuf::Arena* arena, ResolveRequest&& from) noexcept
      : ResolveRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExecutionFieldNumber = 1,
  };
  // .rpc.Execution execution = 1;
  bool has_execution() const;
  void clear_execution() ;
  const ::rpc::Execution& execution() const;
  PROTOBUF_NODISCARD ::rpc::Execution* release_execution();
  ::rpc::Execution* mutable_execution();
  void set_allocated_execution(::rpc::Execution* value);
  void unsafe_arena_set_allocated_execution(::rpc::Execution* value);
  ::rpc::Execution* unsafe_arena_release_execution();

  private:
  const ::rpc::Execution& _internal_execution() const;
  ::rpc::Execution* _internal_mutable_execution();

  public:
  // @@protoc_insertion_point(class_scope:rpc.ResolveRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ResolveRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ResolveRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::rpc::Execution* execution_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_supervise_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Execution

// string executable = 1;
inline void Execution::clear_executable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.ClearToEmpty();
}
inline const std::string& Execution::executable() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc.Execution.executable)
  return _internal_executable();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Execution::set_executable(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc.Execution.executable)
}
inline std::string* Execution::mutable_executable() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_executable();
  // @@protoc_insertion_point(field_mutable:rpc.Execution.executable)
  return _s;
}
inline const std::string& Execution::_internal_executable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.executable_.Get();
}
inline void Execution::_internal_set_executable(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.Set(value, GetArena());
}
inline std::string* Execution::_internal_mutable_executable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.executable_.Mutable( GetArena());
}
inline std::string* Execution::release_executable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rpc.Execution.executable)
  return _impl_.executable_.Release();
}
inline void Execution::set_allocated_executable(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.executable_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.executable_.IsDefault()) {
          _impl_.executable_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc.Execution.executable)
}

// repeated string arguments = 2;
inline int Execution::_internal_arguments_size() const {
  return _internal_arguments().size();
}
inline int Execution::arguments_size() const {
  return _internal_arguments_size();
}
inline void Execution::clear_arguments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.arguments_.Clear();
}
inline std::string* Execution::add_arguments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_arguments()->Add();
  // @@protoc_insertion_point(field_add_mutable:rpc.Execution.arguments)
  return _s;
}
inline const std::string& Execution::arguments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc.Execution.arguments)
  return _internal_arguments().Get(index);
}
inline std::string* Execution::mutable_arguments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rpc.Execution.arguments)
  return _internal_mutable_arguments()->Mutable(index);
}
inline void Execution::set_arguments(int index, const std::string& value) {
  _internal_mutable_arguments()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:rpc.Execution.arguments)
}
inline void Execution::set_arguments(int index, std::string&& value) {
  _internal_mutable_arguments()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:rpc.Execution.arguments)
}
inline void Execution::set_arguments(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_arguments()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rpc.Execution.arguments)
}
inline void Execution::set_arguments(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_arguments()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rpc.Execution.arguments)
}
inline void Execution::set_arguments(int index, absl::string_view value) {
  _internal_mutable_arguments()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:rpc.Execution.arguments)
}
inline void Execution::add_arguments(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_arguments()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:rpc.Execution.arguments)
}
inline void Execution::add_arguments(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_arguments()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:rpc.Execution.arguments)
}
inline void Execution::add_arguments(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_arguments()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rpc.Execution.arguments)
}
inline void Execution::add_arguments(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_arguments()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rpc.Execution.arguments)
}
inline void Execution::add_arguments(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_arguments()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:rpc.Execution.arguments)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Execution::arguments() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rpc.Execution.arguments)
  return _internal_arguments();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Execution::mutable_arguments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rpc.Execution.arguments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_arguments();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Execution::_internal_arguments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.arguments_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Execution::_internal_mutable_arguments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.arguments_;
}

// string working_dir = 3;
inline void Execution::clear_working_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.working_dir_.ClearToEmpty();
}
inline const std::string& Execution::working_dir() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc.Execution.working_dir)
  return _internal_working_dir();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Execution::set_working_dir(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.working_dir_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rpc.Execution.working_dir)
}
inline std::string* Execution::mutable_working_dir() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_working_dir();
  // @@protoc_insertion_point(field_mutable:rpc.Execution.working_dir)
  return _s;
}
inline const std::string& Execution::_internal_working_dir() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.working_dir_.Get();
}
inline void Execution::_internal_set_working_dir(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.working_dir_.Set(value, GetArena());
}
inline std::string* Execution::_internal_mutable_working_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.working_dir_.Mutable( GetArena());
}
inline std::string* Execution::release_working_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rpc.Execution.working_dir)
  return _impl_.working_dir_.Release();
}
inline void Execution::set_allocated_working_dir(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.working_dir_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.working_dir_.IsDefault()) {
          _impl_.working_dir_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc.Execution.working_dir)
}

// map<string, string> environment = 4;
inline int Execution::_internal_environment_size() const {
  return _internal_environment().size();
}
inline int Execution::environment_size() const {
  return _internal_environment_size();
}
inline void Execution::clear_environment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.environment_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Execution::_internal_environment() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.environment_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Execution::environment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:rpc.Execution.environment)
  return _internal_environment();
}
inline ::google::protobuf::Map<std::string, std::string>* Execution::_internal_mutable_environment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.environment_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Execution::mutable_environment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:rpc.Execution.environment)
  return _internal_mutable_environment();
}

// -------------------------------------------------------------------

// ResolveRequest

// .rpc.Execution execution = 1;
inline bool ResolveRequest::has_execution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.execution_ != nullptr);
  return value;
}
inline void ResolveRequest::clear_execution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.execution_ != nullptr) _impl_.execution_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::rpc::Execution& ResolveRequest::_internal_execution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::rpc::Execution* p = _impl_.execution_;
  return p != nullptr ? *p : reinterpret_cast<const ::rpc::Execution&>(::rpc::_Execution_default_instance_);
}
inline const ::rpc::Execution& ResolveRequest::execution() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc.ResolveRequest.execution)
  return _internal_execution();
}
inline void ResolveRequest::unsafe_arena_set_allocated_execution(::rpc::Execution* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.execution_);
  }
  _impl_.execution_ = reinterpret_cast<::rpc::Execution*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.ResolveRequest.execution)
}
inline ::rpc::Execution* ResolveRequest::release_execution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rpc::Execution* released = _impl_.execution_;
  _impl_.execution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::rpc::Execution* ResolveRequest::unsafe_arena_release_execution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rpc.ResolveRequest.execution)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rpc::Execution* temp = _impl_.execution_;
  _impl_.execution_ = nullptr;
  return temp;
}
inline ::rpc::Execution* ResolveRequest::_internal_mutable_execution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.execution_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::rpc::Execution>(GetArena());
    _impl_.execution_ = reinterpret_cast<::rpc::Execution*>(p);
  }
  return _impl_.execution_;
}
inline ::rpc::Execution* ResolveRequest::mutable_execution() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::rpc::Execution* _msg = _internal_mutable_execution();
  // @@protoc_insertion_point(field_mutable:rpc.ResolveRequest.execution)
  return _msg;
}
inline void ResolveRequest::set_allocated_execution(::rpc::Execution* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.execution_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.execution_ = reinterpret_cast<::rpc::Execution*>(value);
  // @@protoc_insertion_point(field_set_allocated:rpc.ResolveRequest.execution)
}

// -------------------------------------------------------------------

// ResolveResponse

// .rpc.Execution execution = 1;
inline bool ResolveResponse::has_execution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.execution_ != nullptr);
  return value;
}
inline void ResolveResponse::clear_execution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.execution_ != nullptr) _impl_.execution_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::rpc::Execution& ResolveResponse::_internal_execution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::rpc::Execution* p = _impl_.execution_;
  return p != nullptr ? *p : reinterpret_cast<const ::rpc::Execution&>(::rpc::_Execution_default_instance_);
}
inline const ::rpc::Execution& ResolveResponse::execution() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rpc.ResolveResponse.execution)
  return _internal_execution();
}
inline void ResolveResponse::unsafe_arena_set_allocated_execution(::rpc::Execution* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.execution_);
  }
  _impl_.execution_ = reinterpret_cast<::rpc::Execution*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.ResolveResponse.execution)
}
inline ::rpc::Execution* ResolveResponse::release_execution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rpc::Execution* released = _impl_.execution_;
  _impl_.execution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::rpc::Execution* ResolveResponse::unsafe_arena_release_execution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rpc.ResolveResponse.execution)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rpc::Execution* temp = _impl_.execution_;
  _impl_.execution_ = nullptr;
  return temp;
}
inline ::rpc::Execution* ResolveResponse::_internal_mutable_execution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.execution_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::rpc::Execution>(GetArena());
    _impl_.execution_ = reinterpret_cast<::rpc::Execution*>(p);
  }
  return _impl_.execution_;
}
inline ::rpc::Execution* ResolveResponse::mutable_execution() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::rpc::Execution* _msg = _internal_mutable_execution();
  // @@protoc_insertion_point(field_mutable:rpc.ResolveResponse.execution)
  return _msg;
}
inline void ResolveResponse::set_allocated_execution(::rpc::Execution* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.execution_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.execution_ = reinterpret_cast<::rpc::Execution*>(value);
  // @@protoc_insertion_point(field_set_allocated:rpc.ResolveResponse.execution)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_supervise_2eproto_2epb_2eh
